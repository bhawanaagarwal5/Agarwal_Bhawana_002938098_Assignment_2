/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jFramesCode;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author agarw
 */
public class ViewRecords extends javax.swing.JFrame {

    /**
     * Creates new form ViewRecords
     */
    
    carProfile cr;
    String[] arr_;
    public ViewRecords(carProfile cr_) {
        
        initComponents();
        this.cr = cr_;
        
        //setselectedIndex();
        addRecords(cr.getTotrecords());
        populateComboBoxes(cr.getTotrecords());
        
        
    }

    public ViewRecords() {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        RefreshBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        combo_availabillity = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        combo_certificate = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        combo_city = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        combo_manufacturer = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        combo_year = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        searchText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jScrollPane2.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 400));

        jScrollPane1.setBackground(new java.awt.Color(0, 153, 153));
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(75, 100));
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBackground(new java.awt.Color(0, 153, 153));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Car Name", "Manufacturer", "Model Number", "Manufacture Date", "Serial number", "No. of Seats", "Maintainance ceritificate status", "City", "Is Car Available ?", "Data Modified on"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jTable1.setMinimumSize(new java.awt.Dimension(200, 250));
        jTable1.setRowHeight(20);
        jTable1.setSelectionBackground(new java.awt.Color(0, 204, 204));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        jButton1.setText("Add");
        jButton1.setPreferredSize(new java.awt.Dimension(143, 21));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Delete");
        jButton2.setPreferredSize(new java.awt.Dimension(143, 21));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Update Selected Record");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        RefreshBtn.setText("Refresh Table");
        RefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RefreshBtn)
                .addGap(38, 38, 38)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton3)
                .addContainerGap(351, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3)
                    .addComponent(RefreshBtn))
                .addGap(51, 51, 51))
        );

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        combo_availabillity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_availabillityActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Available");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Certificate");

        combo_certificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_certificateActionPerformed(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("City");

        combo_city.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_cityActionPerformed(evt);
            }
        });

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Manufacturer");

        combo_manufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_manufacturerActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Manufacture Year");

        combo_year.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_yearActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Filter");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_city, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(combo_certificate, 0, 100, Short.MAX_VALUE)
                            .addComponent(combo_manufacturer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(combo_year, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(combo_availabillity, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_availabillity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(combo_certificate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_city, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(combo_manufacturer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(combo_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));

        searchText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTextActionPerformed(evt);
            }
        });
        searchText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTextKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchText)
                .addContainerGap())
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        CreateProfile c = new CreateProfile(cr);
        c.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int response = JOptionPane.showConfirmDialog(null, "Are you sure, you want to delete this record?", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (response == JOptionPane.YES_OPTION) {
            deleteSelectedRowFromTable(model);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void combo_certificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_certificateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        filterQuery(dtm, String.valueOf(combo_certificate.getSelectedItem()));
    }//GEN-LAST:event_combo_certificateActionPerformed

    private void combo_cityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_cityActionPerformed
        // TODO add your handling code here:
        //cr.getTotrecords().
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        filterQuery(dtm, String.valueOf(combo_city.getSelectedItem()));
        
        
    }//GEN-LAST:event_combo_cityActionPerformed

    private void searchTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTextActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchTextActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
        
        int getSelectedRow = jTable1.getSelectedRow();
        //up.testVar.setText(String.valueOf(getSelectedRow));
        
        if (getSelectedRow > -1){
            UpdateCarDetails up = new UpdateCarDetails(cr);
            up.setVisible(true);
            up.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            
            
            up.txt_carName1.setText(dtm.getValueAt(getSelectedRow, 0).toString());
            up.txt_Manufacturer1.setText(dtm.getValueAt(getSelectedRow, 1).toString());
            up.txt_model1.setText(dtm.getValueAt(getSelectedRow, 2).toString());
            up.txt_year1.setText(dtm.getValueAt(getSelectedRow, 3).toString());
            up.txt_serialnum1.setText(dtm.getValueAt(getSelectedRow, 4).toString());
            up.txt_seats.setText(dtm.getValueAt(getSelectedRow, 5).toString());
            String certi  = dtm.getValueAt(getSelectedRow, 6).toString();
            if(certi == "Expired"){
                up.check_certificate.setSelected(false);
            }
            else
            {
                up.check_certificate.setSelected(true);
            }
            up.txt_city.setText(dtm.getValueAt(getSelectedRow, 7).toString());
            String avail = dtm.getValueAt(getSelectedRow, 8).toString();
            if(avail == "Available"){
                up.check_availability.setSelected(true);
            }
            else
            {
                up.check_availability.setSelected(true);
            }
            
        
        }
        else{
            JOptionPane.showMessageDialog(null, "No row selected.");
        }
        
           
    }//GEN-LAST:event_jButton3ActionPerformed

    private void searchTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchTextKeyPressed

    private void searchTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextKeyReleased
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        String searchT = searchText.getText().trim();
        filterQuery(dtm, searchT);
    }//GEN-LAST:event_searchTextKeyReleased

    private void combo_availabillityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_availabillityActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        filterQuery(dtm, String.valueOf(combo_availabillity.getSelectedItem()));
    }//GEN-LAST:event_combo_availabillityActionPerformed

    private void combo_manufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_manufacturerActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        filterQuery(dtm, String.valueOf(combo_manufacturer.getSelectedItem()));
    }//GEN-LAST:event_combo_manufacturerActionPerformed

    private void combo_yearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_yearActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        filterQuery(dtm, String.valueOf(combo_year.getSelectedItem()));
    }//GEN-LAST:event_combo_yearActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jScrollPane1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
//        int getSelectedrow = jTable1.getSelectedRow();
//        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
//        UpdateCarDetails up = new UpdateCarDetails();
//        up.setVisible(true);
//        
//        up.txt_carName1.setText(dtm.getValueAt(getSelectedrow, 1).toString());
//        up.txt_Manufacturer1.setText(dtm.getValueAt(getSelectedrow, 2).toString());
//        up.txt_model1.setText(dtm.getValueAt(getSelectedrow, 3).toString());
//        up.txt_year1.setText(dtm.getValueAt(getSelectedrow, 4).toString());
//        up.txt_serialnum1.setText(dtm.getValueAt(getSelectedrow, 5).toString());
//        up.txt_seats.setText(dtm.getValueAt(getSelectedrow, 6).toString());
//        String av = dtm.getValueAt(getSelectedrow, 7).toString();
//        if(av == "Expired"){
//            up.check_certificate.setSelected(false);
//        }
//        else{
//            up.check_certificate.setSelected(true);
//        }
//        up.txt_city.setText(dtm.getValueAt(getSelectedrow, 8).toString());
//        String maintainance_certi = dtm.getValueAt(getSelectedrow, 9).toString();
//        if(maintainance_certi == "Available"){
//            up.check_availability.setSelected(true);
//        }
//        else{
//            up.check_availability.setSelected(false);
//        }
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void RefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshBtnActionPerformed
        // TODO add your handling code here:
        //jTable1.revalidate();
        addRecords(cr.getTotrecords());
        
        
    }//GEN-LAST:event_RefreshBtnActionPerformed

    public void filterQuery(DefaultTableModel dtm, String s){
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<>(dtm);
        jTable1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(s));
    }
    
    
//    public void getselectedRecordItem(DefaultTableModel model){
//        int getSelectedRow = jTable1.getSelectedRow();
//        //Object[] rowdata =  new Object[1];
//        if (getSelectedRow >= 0) {
//            //carProfile cr = (carProfile) model.getValueAt(getSelectedRow, 0);
//            //UpdateCarDetails.setTextToFields(cr);
//            UpdateCarDetails up = new UpdateCarDetails(getSelectedRow);
//            up.setVisible(true);
//            
//        }   
//        else{
//            System.out.println("Item not found");
//        }
//        
//    }
    
    public void deleteSelectedRowFromTable(DefaultTableModel model){
        int getSelectedRow = jTable1.getSelectedRow();
        //System.out.println("selected row" + getSelectedRow);
        //Check if there is a selected row
        if (getSelectedRow >= 0) {
            model.removeRow(getSelectedRow);
            cr.getTotrecords().remove(getSelectedRow);
            JOptionPane.showMessageDialog(null, "Deleted row");
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select the row to delete");
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewRecords.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRecords().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RefreshBtn;
    private static javax.swing.JComboBox<String> combo_availabillity;
    private static javax.swing.JComboBox<String> combo_certificate;
    private static javax.swing.JComboBox<String> combo_city;
    private static javax.swing.JComboBox<String> combo_manufacturer;
    private static javax.swing.JComboBox<String> combo_year;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTable jTable1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables

    
    
    public static void addRecords(ArrayList<carProfile> carRecords) {
        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();
        //ArrayList<carProfile>carRecords = cr.getTotrecords();
        
        String crName, manufacturer, modelNum, manufactureddate, serialNum, seats, certificate, city,
                 isCarAvailable, modifiedDate;
        //int setCount_ = tblModel.setRowCount(0);
        tblModel.setRowCount(0);
        try{
            for(carProfile sr: carRecords){
                crName = sr.getCarName();
                manufacturer = sr.getManufacturedBy();
                modelNum = sr.getModelNumber();
                manufactureddate = String.valueOf(sr.getManufacturedYear());
                serialNum = sr.getSerialNum();
                seats = String.valueOf(sr.getSeatsNumber());
                boolean certiVal = sr.isMainCertificate();
                if(certiVal) certificate = "Valid";
                else certificate = "Expired";
                city = sr.getCity();
                boolean availVal = sr.isAvailability();
                if(availVal) isCarAvailable = "Available";
                else isCarAvailable ="Not Available";
                modifiedDate = sr.getModifiedDate();
                Object[] data = {crName,manufacturer, modelNum, manufactureddate, serialNum, seats, certificate,city, isCarAvailable,
                modifiedDate};
                tblModel.addRow(data);
            }
            
        } 
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "No records found!!");
                }
    }
    
    
    public static void populateComboBoxes(ArrayList<carProfile> cp){
        HashMap<String,Integer> availability_ = new HashMap<>();
        HashMap<String,Integer> certi_ = new HashMap<>();
        HashMap<String,Integer> city_ = new HashMap<>();
        HashMap<String,Integer> manufacturer_ = new HashMap<>();
        HashMap<String,Integer> year_ = new HashMap<>();
        
        int i = 0;
        availability_.put("",0);
        certi_.put("",0);
        city_.put("",0);
        manufacturer_.put("",0);
        year_.put("",0);
        for(carProfile sr: cp){   
            i++;
            boolean val = sr.isAvailability();
            if(val){
                availability_.put("Available", i);
            }
            else{
                availability_.put("Not Available", i);
            }
            boolean val1 = sr.isMainCertificate();
            if(val1){
                certi_.put("Valid", i);
            }
            else{
                certi_.put("Expired", i);
            }
            
            city_.put((String) sr.getCity(), i);
            manufacturer_.put((String) sr.getManufacturedBy(), i);
            year_.put((String) sr.getManufacturedYear(), i);
//            ViewRecords.combo_city.addItem(sr.getCity());
//            ViewRecords.combo_manufacturer.addItem(sr.getManufacturedBy());
//            ViewRecords.combo_year.addItem(sr.getManufacturedYear());           
        } 
        
        setcomboBoxValues(availability_, "availability");
        setcomboBoxValues(certi_, "certi");
        setcomboBoxValues(city_, "city");
        setcomboBoxValues(manufacturer_, "manufacturer");
        setcomboBoxValues(year_, "year");
    }
    
    
    public static void setcomboBoxValues(HashMap<String,Integer> var,String type){
        
        for(Map.Entry e:var.entrySet()){
            if(type == "availability"){
                ViewRecords.combo_availabillity.addItem((String)e.getKey());
            }
            else if(type == "certi")
            {
                ViewRecords.combo_certificate.addItem((String)e.getKey());
            }
            else if (type == "city")
            {
                ViewRecords.combo_city.addItem((String)e.getKey());
            }
            else if (type == "manufacturer")
            {
                ViewRecords.combo_manufacturer.addItem((String)e.getKey());
            }
            else{
                if (type == "year")
                {
                    ViewRecords.combo_year.addItem((String)e.getKey());
                }
            }       
        
        }
    
    }
//    public static void setselectedIndex(){
//        ViewRecords.combo_availabillity.setSelectedItem(null);
//        ViewRecords.combo_city.setSelectedItem(null);
//        ViewRecords.combo_manufacturer.setSelectedItem(null);
//        ViewRecords.combo_certificate.setSelectedItem(null);
//        ViewRecords.combo_year.setSelectedItem(null);
//    }
//    
    
    public static void addNewRecords(Object[] dataRow){
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.addRow(dataRow);
    
    }
    

    private static String getDate() {
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");  
        LocalDateTime now = LocalDateTime.now();  
        return String.valueOf(dtf.format(now));  
    }
}
